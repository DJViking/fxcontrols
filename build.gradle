import java.time.format.DateTimeFormatter
import java.time.ZoneId

plugins {
    id 'java'
    id 'eclipse'
    id 'checkstyle'
    id 'jacoco'
    id "com.diffplug.gradle.spotless" version "3.15.0"
}

final Date date = new Date()
final DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy.MM.dd HH:mm:ss")
ext {
    buildDateTime = date.toInstant().atZone(ZoneId.systemDefault()).format(formatter);

    buildRelease = project.hasProperty("release")
    if (!buildRelease) {
        project.version = project.version + "-SNAPSHOT"
    }

    moduleName = 'no.smeaworks.fxcontrols'
}

repositories {
    mavenCentral()
}

def currentOS = org.gradle.internal.os.OperatingSystem.current()
def platform
if (currentOS.isWindows()) {
    platform = 'win'
} else if (currentOS.isLinux()) {
    platform = 'linux'
} else if (currentOS.isMacOsX()) {
    platform = 'mac'
}

final def textfxGroup = "org.testfx"
final def textfxVersion = "4.0.14-alpha"

final def openjfxGroup = "org.openjfx"
final def openjfxVersion = "11"

final def junitJupiterGroup = 'org.junit.jupiter'
final def junitJupiterVersion = '5.2.0'

final def junitPlatformGroup = 'org.junit.platform'
final def junitPlatformVersion = '1.2.0'
dependencies {
    compile group: openjfxGroup, name: "javafx-base", version: openjfxVersion, classifier: platform
    compile group: openjfxGroup, name: "javafx-fxml", version: openjfxVersion, classifier: platform
    compile group: openjfxGroup, name: "javafx-controls", version: openjfxVersion, classifier: platform
    compile group: openjfxGroup, name: "javafx-graphics", version: openjfxVersion, classifier: platform
    compile group: openjfxGroup, name: "javafx-media", version: openjfxVersion, classifier: platform
    compile group: openjfxGroup, name: "javafx-web", version: openjfxVersion, classifier: platform

    testCompile group: junitJupiterGroup, name: 'junit-jupiter-api', version: junitJupiterVersion
    testRuntime group: junitJupiterGroup, name: 'junit-jupiter-engine', version: junitJupiterVersion

    testRuntimeOnly group: junitPlatformGroup, name: 'junit-platform-launcher', version: junitPlatformVersion

    testCompile group: textfxGroup, name: "testfx-core", version: textfxVersion
    testCompile group: textfxGroup, name: "testfx-junit5", version: textfxVersion
    testCompile group: textfxGroup, name: "openjfx-monocle", version: "jdk-11+23"
}

jar {
    doFirst {
        manifest {
            attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Implementation-Vendor': project.group,
                'Specification-Title': project.name,
                'Specification-Version': project.version,
                'Specification-Vendor': project.group,
                'Built-By': System.getProperty('user.name'),
                'Build-Time': buildDateTime,
                'Created-By': System.properties['java.version'] + " (" + System.properties['java.vendor'] + " " + System.properties['java.vm.version'] + ")",
                'Permissions': 'all-permissions',
                'Codebase': '*'
            )
        }
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

test {
    useJUnitPlatform()

    reports {
        html.enabled = true
    }
}

jacoco {
    toolVersion = "0.8.2"
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

checkstyle {
    toolVersion '8.11'
}

apply from: rootProject.file('spotless.gradle')
apply from: rootProject.file('modules.gradle')
